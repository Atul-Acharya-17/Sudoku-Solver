{"version":3,"sources":["logo.svg","components/footer/description.jsx","components/header/intro.jsx","components/main/block.jsx","components/main/row.jsx","back-tracking/solver.js","components/main/grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["Description","className","Component","Intro","Block","state","getClassName","id","props","tuple","Math","floor","styleName","this","onClick","e","action","value","Row","size","style","display","row","map","index","solver","board","i","table","j","m","n","startRow","startCol","isSolvable","isSolved","k","isValid","rowStart","colStart","Grid","grid","solve","setState","reset","incrementGrid","idx","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71ed8439.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\nimport '../../style/style.css';\r\n\r\nclass Description extends Component {\r\n    render() { \r\n        return ( \r\n            <footer className=\"description\">\r\n                Backtracking is an algorithmic-technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, removing those solutions that fail to satisfy the constraints of the problem at any point of time\r\n            </footer>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Description;","import React, { Component } from 'react';\r\nimport '../../style/style.css';\r\n\r\nclass Intro extends Component {\r\n    render() { \r\n        return (\r\n            <header className=\"heading\">\r\n                SUDOKU SOLVER\r\n                <br/>\r\n                <h4>\r\n                    Fill the board and solve!\r\n                </h4>\r\n            </header>\r\n          );\r\n    }\r\n}\r\n \r\nexport default Intro;","import React, { Component } from 'react';\r\nimport '../../style/style.css';\r\n\r\n\r\nclass Block extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <button className={this.getClassName()}\r\n         onClick = {(e) => this.props.action(this.props.tuple)}>\r\n             {this.props.value > 0 ? this.props.value : \" \"}\r\n         </button>\r\n         );\r\n    }\r\n\r\n    getClassName = () => {\r\n        let styleName = \"block \";\r\n        const id = this.props.tuple;\r\n        const row = Math.floor(id[0]/3);\r\n        const col = Math.floor(id[1]/3);\r\n        const sum = (row + col) % 2;\r\n\r\n        if (sum === 1) return styleName+\"odd-square\";\r\n        else return styleName+\"even-square\";\r\n    }\r\n}\r\n \r\nexport default Block;","import React, { Component } from 'react';\r\nimport Block from './block';\r\n\r\nclass Row extends Component {\r\n    state = { \r\n        size : [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n     }\r\n    render() { \r\n        // Add inline-block\r\n        return ( \r\n            <div style = {{display: \"block\"}}>\r\n                {this.props.row.map((value, index) => (\r\n                    <div key = {index} style = {{display: \"inline-block\"}}>\r\n                        <Block value = {value} tuple = {[this.props.id, index]} action = {this.props.action}>\r\n                        </Block>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Row;","const SUDOKU_SIZE = 9;\r\n\r\nexport function solver(board){\r\n    if (!isSolvable(board)) {\r\n        return false;\r\n    }\r\n    if (isSolved(board)) {\r\n        return true;  \r\n    } \r\n\r\n    for (let i = 0; i < SUDOKU_SIZE; i++) {\r\n        for (let j = 0; j < SUDOKU_SIZE; j++){\r\n            if (board[i][j] === 0) {\r\n                for (let k = 1; k <= SUDOKU_SIZE; k++){\r\n                    if (isValid(board, i, j, k)){\r\n                        board[i][j] = k;\r\n                        if (solver(board))\r\n                            return true;\r\n                        board[i][j] = 0;\r\n                    }\r\n                    else {\r\n                        board[i][j] = 0;\r\n                        continue;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction isValid(board, m, n, k) {\r\n    // Check mth row\r\n    for (let j = 0; j < SUDOKU_SIZE; j++){\r\n        if (board[m][j] === k) {\r\n            return false;\r\n        }\r\n    }\r\n    // Check nth column\r\n    for (let i = 0; i < SUDOKU_SIZE; i++){\r\n        if (board[i][n] === k) {\r\n            return false;\r\n        }\r\n    }\r\n    // Check the particular block\r\n    const rowStart = 3 * Math.floor(m/3);\r\n    const colStart = 3 * Math.floor(n/3);\r\n\r\n    for (let i = rowStart; i < rowStart + 3; i++){\r\n        for (let j = colStart; j < colStart + 3; j++){\r\n            if (board[i][j] === k)\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n\r\n}\r\n\r\n\r\nfunction isSolved(board){\r\n    // CHECK ALL ROWS FIRST\r\n\r\n    for (let i = 0; i < SUDOKU_SIZE; i++){\r\n        let table = [0, 0, 0, 0, 0 , 0, 0, 0, 0];\r\n        for (let j = 0; j < SUDOKU_SIZE; j++){\r\n            if (board[i][j] === 0) {\r\n                return false;\r\n            }\r\n            const index = board[i][j] % 9;\r\n            table[index] += 1;\r\n            if (table[index] > 1) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // CHECK ALL COLUMNS\r\n\r\n    for (let i = 0; i < SUDOKU_SIZE; i++){\r\n        let table = [0, 0, 0, 0, 0 , 0, 0, 0, 0];\r\n        for (let j = 0; j < SUDOKU_SIZE; j++){\r\n            if (board[j][i] === 0) {\r\n                return false;\r\n            }\r\n            const index = board[j][i] % 9;\r\n            table[index] += 1;\r\n            if (table[index] > 1) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // CHECK ALL BLOCKS\r\n    // starting indexes for blocks are 0, 3, 6\r\n\r\n    for(let m = 0; m < 3; m++){\r\n        for (let n = 0; n < 3; n++){\r\n            const startRow = 3 * m;\r\n            const startCol = 3 * n;\r\n            let table = [0, 0, 0, 0, 0 , 0, 0, 0, 0];\r\n            for (let i = startRow; i < startRow + 3; i++){\r\n                for (let j = startCol; j < startCol + 3; j++){\r\n                    if (board[i][j] === 0) {\r\n                        return false;\r\n                    }\r\n                    const index = board[j][i] % 9;\r\n                    table[index] += 1;\r\n                    if (table[index] > 1) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\nfunction isSolvable(board){\r\n    for (let i = 0; i < SUDOKU_SIZE; i++){\r\n        let table = [0, 0, 0, 0, 0 , 0, 0, 0, 0];\r\n        for (let j = 0; j < SUDOKU_SIZE; j++){\r\n            let index;\r\n            if (board[i][j] === 0) {\r\n                continue;\r\n            }\r\n            else{\r\n                index = board[i][j] % 9;\r\n                table[index] += 1;\r\n            }\r\n            if (table[index] > 1) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < SUDOKU_SIZE; i++){\r\n        let table = [0, 0, 0, 0, 0 , 0, 0, 0, 0];\r\n        for (let j = 0; j < SUDOKU_SIZE; j++){\r\n            let index;\r\n            if (board[j][i] === 0) {\r\n                continue;\r\n            }\r\n            else{\r\n                index = board[j][i] % 9;\r\n                table[index] += 1;\r\n            }\r\n            if (table[index] > 1) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    for(let m = 0; m < 3; m++){\r\n        for (let n = 0; n < 3; n++){\r\n            const startRow = 3 * m;\r\n            const startCol = 3 * n;\r\n            let table = [0, 0, 0, 0, 0 , 0, 0, 0, 0];\r\n            for (let i = startRow; i < startRow + 3; i++){\r\n                for (let j = startCol; j < startCol + 3; j++){\r\n                    let index;\r\n                    if (board[i][j] === 0) {\r\n                        continue;\r\n                    }\r\n                    else{\r\n                        index = board[i][j] % 9;\r\n                        table[index] += 1;\r\n                    }\r\n                    if (table[index] > 1) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}","import { getByDisplayValue } from '@testing-library/react';\r\nimport React, { Component } from 'react';\r\nimport Row from './row';\r\nimport {solver} from '../../back-tracking/solver';\r\nimport '../../style/style.css';\r\n\r\nclass Grid extends Component {\r\n    state = { \r\n        grid: [[0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0]],\r\n     }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <div className = \"grid-container\">\r\n                    {this.state.grid.map((row, idx) => \r\n                    (<div>\r\n                        <Row key = {idx} row = {row} id = {idx} action = {this.incrementGrid}>\r\n                        </Row>\r\n                    </div>)\r\n                    )}\r\n                </div>\r\n                <button className=\"first button btn btn-primary\" onClick = {this.solve}>\r\n                    Solve\r\n                </button>\r\n                <button className=\"button btn btn-warning\" onClick = {this.reset}>\r\n                    Reset\r\n                </button>\r\n            </div>\r\n         );\r\n    }\r\n\r\n    solve = () =>{\r\n        const found = solver(this.state.grid);\r\n        if (found){\r\n            const grid = this.state.grid;\r\n            this.setState({grid});\r\n        }\r\n    }\r\n\r\n    reset = () => {\r\n        const grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0]]\r\n        this.setState({grid});\r\n    }\r\n\r\n    incrementGrid = (id) => {\r\n        const i = id[0];\r\n        const j = id[1];\r\n        const grid = this.state.grid;\r\n        grid[i][j]  = (grid[i][j] + 1)%10;\r\n        this.setState({grid});\r\n    }\r\n}\r\n \r\nexport default Grid;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport './components/footer/description';\nimport Description from './components/footer/description';\nimport Intro from './components/header/intro';\nimport Grid from \"./components/main/grid\";\nfunction App() {\n  return (\n    <div>\n      <Intro></Intro>\n      <Grid></Grid>\n      <Description/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}